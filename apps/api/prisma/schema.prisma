// Prisma schema for Supabase (PostgreSQL)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ObligationPeriod {
  day
  week
  month
}

enum ObligationStatus {
  pending
  completed
  expired
}

enum EventKind {
  revolution
  gekokujo
  custom
}

enum RewardKind {
  badge
  boost
  feature
}

enum ActorRole {
  user
  admin
  system
}

// Core models
model User {
  id             String   @id @default(uuid())
  authProviderId String? // Supabase Auth user id（任意保持）
  email          String?  @unique
  handle         String?  @unique
  ageConfirmed   Boolean  @default(false)
  referredBy     String? // User.id
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tierState         UserTierState?
  transitions       TierTransition[]
  obligations       Obligation[]
  adViews           AdView[]
  auditLogs         AuditLog[]          @relation("AuditActor")
  DrawEntry         DrawEntry[]
  DrawWin           DrawWin[]
  LoginLog          LoginLog[]
  NotificationToken NotificationToken[]
  RouletteWin       RouletteWin[]
  WishItem          WishItem[]
}

model Tier {
  id                Int      @id // 1..8 を想定
  name              String
  obligationsSchema Json
  perksSchema       Json
  rulesVersion      Int
  activeFrom        DateTime @default(now())

  users UserTierState[]
}

model UserTierState {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  tier          Tier      @relation(fields: [tierId], references: [id])
  tierId        Int
  effectiveFrom DateTime  @default(now())
  lockUntil     DateTime?
  stayDays      Int       @default(0)
}

model TierTransition {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  fromTierId Int?
  toTierId   Int
  decidedAt  DateTime @default(now())
  baseProbs  Json
  modifiers  Json
  eventId    String?
  reason     String?
}

model Obligation {
  id             String           @id @default(uuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  period         ObligationPeriod
  schemaSnapshot Json
  issuedFor      DateTime // day/week/month の代表日
  status         ObligationStatus @default(pending)
  progress       Json             @default("{}")

  logs ObligationLog[]

  @@unique([userId, period, issuedFor])
  @@index([userId, period, issuedFor])
}

model ObligationLog {
  id           String     @id @default(uuid())
  obligation   Obligation @relation(fields: [obligationId], references: [id])
  obligationId String
  kind         String // view_ad/login/referral etc
  occurredAt   DateTime   @default(now())
  meta         Json?
}

model AdView {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  adSlot   String
  tokenId  String?
  verified Boolean  @default(false)
  viewedAt DateTime @default(now())

  @@unique([tokenId])
  @@index([userId, adSlot, viewedAt])
}

model Event {
  id          String    @id @default(uuid())
  kind        EventKind
  windowFrom  DateTime?
  windowTo    DateTime?
  payload     Json?
  triggeredBy String?
  triggeredAt DateTime  @default(now())
}

model Reward {
  id         String     @id @default(uuid())
  kind       RewardKind
  weight     Float      @default(1)
  windowFrom DateTime?
  windowTo   DateTime?
  meta       Json?
  DrawWin    DrawWin[]
}

model DrawEntry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  day       DateTime // JST day start
  createdAt DateTime @default(now())

  @@unique([userId, day])
}

model DrawWin {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  reward    Reward?  @relation(fields: [rewardId], references: [id])
  rewardId  String?
  decidedAt DateTime @default(now())
  meta      Json?
}

model AuditLog {
  id        String    @id @default(uuid())
  actor     User?     @relation("AuditActor", fields: [actorId], references: [id])
  actorId   String?
  actorRole ActorRole
  action    String
  target    String?
  payload   Json?
  createdAt DateTime  @default(now())
}

model LoginLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  day       DateTime // JST day start
  createdAt DateTime @default(now())

  @@unique([userId, day])
  @@index([userId, day])
}

model NotificationToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  platform  String // web / ios / android
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, active])
}

model TierDistributionDaily {
  day       DateTime @id // JST day start
  counts    Json
  createdAt DateTime @default(now())
}

model RouletteWin {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  itemId     String
  title      String
  imageUrl   String
  productUrl String
  decidedAt  DateTime @default(now())

  @@index([userId, decidedAt])
}

model WishItem {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  title         String
  imageUrl      String
  productUrl    String
  weight        Float     @default(1)
  clickCount    Int       @default(0)
  lastClickedAt DateTime?
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())

  @@index([userId, active])
}
